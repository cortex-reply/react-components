"use strict";(self.webpackChunkcortex_react_components=self.webpackChunkcortex_react_components||[]).push([[664],{"./src/components/CRM/KanbanBoard.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _KanbanBoard__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/CRM/KanbanBoard.tsx"),_mockData__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/CRM/mockData.ts"),console=__webpack_require__("./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js");const __WEBPACK_DEFAULT_EXPORT__={title:"CRM/KanbanBoard",component:_KanbanBoard__WEBPACK_IMPORTED_MODULE_0__.A,parameters:{layout:"fullscreen"}},Default={args:{initialData:_mockData__WEBPACK_IMPORTED_MODULE_1__.dy,addDeal:async deal=>(console.log("Adding deal:",deal),{id:"new-deal-id",...deal}),updateDeal:async deal=>(console.log("Updating deal:",deal),deal),addCustomer:async customer=>(console.log("Adding customer:",customer),{id:"new-customer-id",...customer}),addComment:async(dealId,comment)=>(console.log("Adding comment to deal:",dealId,comment),{id:"new-comment-id",...comment}),updateDealDescription:async(dealId,description)=>(console.log("Updating deal description:",dealId,description),{..._mockData__WEBPACK_IMPORTED_MODULE_1__.dy.deals.find((d=>d.id===dealId)),description})}},__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    initialData: mockBoardData,\n    addDeal: async deal => {\n      console.log("Adding deal:", deal);\n      return {\n        id: "new-deal-id",\n        ...deal\n      };\n    },\n    updateDeal: async deal => {\n      console.log("Updating deal:", deal);\n      return deal;\n    },\n    addCustomer: async customer => {\n      console.log("Adding customer:", customer);\n      return {\n        id: "new-customer-id",\n        ...customer\n      };\n    },\n    addComment: async (dealId, comment) => {\n      console.log("Adding comment to deal:", dealId, comment);\n      return {\n        id: "new-comment-id",\n        ...comment\n      };\n    },\n    updateDealDescription: async (dealId, description) => {\n      console.log("Updating deal description:", dealId, description);\n      return {\n        ...mockBoardData.deals.find(d => d.id === dealId)!,\n        description\n      };\n    }\n  }\n}',...Default.parameters?.docs?.source}}}}}]);