"use strict";(self.webpackChunkcortex_react_components=self.webpackChunkcortex_react_components||[]).push([[5402],{"./node_modules/.pnpm/@radix-ui+number@1.1.0/node_modules/@radix-ui/number/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function clamp(value,[min,max]){return Math.min(max,Math.max(min,value))}__webpack_require__.d(__webpack_exports__,{q:()=>clamp})},"./node_modules/.pnpm/@radix-ui+primitive@1.1.1/node_modules/@radix-ui/primitive/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function composeEventHandlers(originalEventHandler,ourEventHandler,{checkForDefaultPrevented=!0}={}){return function handleEvent(event){if(originalEventHandler?.(event),!1===checkForDefaultPrevented||!event.defaultPrevented)return ourEventHandler?.(event)}}__webpack_require__.d(__webpack_exports__,{m:()=>composeEventHandlers})},"./node_modules/.pnpm/@radix-ui+react-direction@1.1.0_@types+react@19.0.2_react@19.0.0/node_modules/@radix-ui/react-direction/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{jH:()=>useDirection});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/next@15.1.3_@babel+core@7.26.0_@opentelemetry+api@1.9.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.83.0/node_modules/next/dist/compiled/react/index.js"),DirectionContext=(__webpack_require__("./node_modules/.pnpm/next@15.1.3_@babel+core@7.26.0_@opentelemetry+api@1.9.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.83.0/node_modules/next/dist/compiled/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0));function useDirection(localDir){const globalDir=react__WEBPACK_IMPORTED_MODULE_0__.useContext(DirectionContext);return localDir||globalDir||"ltr"}},"./src/components/Chat/ChatInterfaceMessages.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{StreamingChunks:()=>StreamingChunks,TextOnly:()=>TextOnly,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ChatInterfaceMessages_stories});var jsx_runtime=__webpack_require__("./node_modules/.pnpm/next@15.1.3_@babel+core@7.26.0_@opentelemetry+api@1.9.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.83.0/node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/.pnpm/next@15.1.3_@babel+core@7.26.0_@opentelemetry+api@1.9.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.83.0/node_modules/next/dist/compiled/react/index.js"),avatar=__webpack_require__("./src/components/ui/avatar.tsx"),scroll_area=__webpack_require__("./src/components/ui/scroll-area.tsx"),ChatMessage=__webpack_require__("./src/components/Chat/ChatMessage.tsx");function ChatInterfaceMessages({messages,isLoading}){const messagesEndRef=(0,react.useRef)(null);return(0,react.useEffect)((()=>{var _messagesEndRef_current;null===(_messagesEndRef_current=messagesEndRef.current)||void 0===_messagesEndRef_current||_messagesEndRef_current.scrollIntoView({behavior:"smooth"})}),[messages]),(0,jsx_runtime.jsx)("div",{className:"flex flex-col h-full overflow-hidden",children:(0,jsx_runtime.jsxs)(scroll_area.F,{className:"container flex-1 p-4",children:[(0,jsx_runtime.jsxs)("div",{className:"space-y-6",children:[0===messages.length&&(0,jsx_runtime.jsx)("div",{className:"flex items-center justify-center h-full pt-60",children:(0,jsx_runtime.jsxs)("div",{className:"text-center max-w-md",children:[(0,jsx_runtime.jsx)("h2",{className:"text-2xl font-bold mb-2",children:"Welcome to Dexter"}),(0,jsx_runtime.jsx)("p",{className:"text-zinc-400",children:"Ask me anything or direct your question to a business function directly using the toolbar below."})]})}),isLoading&&(0,jsx_runtime.jsxs)("div",{className:"flex items-start gap-3",children:[(0,jsx_runtime.jsxs)(avatar.eu,{className:"ai-border",children:[(0,jsx_runtime.jsx)(avatar.BK,{src:"/placeholder.svg?height=40&width=40",alt:"AI Assistant"}),(0,jsx_runtime.jsx)(avatar.q5,{children:"AI"})]}),(0,jsx_runtime.jsxs)("div",{className:"grid gap-1.5",children:[(0,jsx_runtime.jsx)("div",{className:"flex items-center gap-2",children:(0,jsx_runtime.jsx)("span",{className:"font-medium",children:"AI Assistant"})}),(0,jsx_runtime.jsx)("div",{className:"rounded-lg p-3 text-sm bg-muted",children:(0,jsx_runtime.jsxs)("div",{className:"flex space-x-2",children:[(0,jsx_runtime.jsx)("div",{className:"w-2 h-2 rounded-full bg-current animate-bounce"}),(0,jsx_runtime.jsx)("div",{className:"w-2 h-2 rounded-full bg-current animate-bounce [animation-delay:0.2s]"}),(0,jsx_runtime.jsx)("div",{className:"w-2 h-2 rounded-full bg-current animate-bounce [animation-delay:0.4s]"})]})})]})]}),messages.map(((message,index)=>(0,jsx_runtime.jsx)(ChatMessage.c,{...message},index)))]}),(0,jsx_runtime.jsx)("div",{ref:messagesEndRef})]})})}ChatInterfaceMessages.__docgenInfo={description:"Custom Chat interface component",methods:[],displayName:"ChatInterfaceMessages",props:{messages:{required:!0,tsType:{name:"Array",elements:[{name:"ChatMessageProps"}],raw:"ChatMessageProps[]"},description:""},contextType:{required:!0,tsType:{name:"union",raw:"'project' | 'businessFunction' | 'global'",elements:[{name:"literal",value:"'project'"},{name:"literal",value:"'businessFunction'"},{name:"literal",value:"'global'"}]},description:""},currentUser:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    id: number\n    name: string\n    email: string\n    avatar: string\n    role: string\n}",signature:{properties:[{key:"id",value:{name:"number",required:!0}},{key:"name",value:{name:"string",required:!0}},{key:"email",value:{name:"string",required:!0}},{key:"avatar",value:{name:"string",required:!0}},{key:"role",value:{name:"string",required:!0}}]}},description:""},businessFunctions:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    id: number\n    name: string\n}",signature:{properties:[{key:"id",value:{name:"number",required:!0}},{key:"name",value:{name:"string",required:!0}}]}}],raw:"FunctionType[]"},description:""},isLoading:{required:!1,tsType:{name:"boolean"},description:""}}};var ChatCardTask_stories=__webpack_require__("./src/components/Chat/ChatCardTask.stories.tsx");const ChatInterfaceMessages_stories={title:"Chat/ChatInterface",component:ChatInterfaceMessages,tags:["autodocs"],argTypes:{contextType:{control:{type:"select",options:["project","businessFunction","global"]}}}},TextOnly={args:{messages:[{id:"1",role:"user",message:{type:"text",data:{content:"Hello, I need help with my laptop."}}},{id:"2",role:"assistant",message:{type:"text",data:{content:"Hi! I can help you with that. Can you describe the issue?"}},currentUser:{name:"Helpdesk Bot"}},{id:"3",role:"user",message:{type:"text",data:{content:"It keeps restarting randomly."}}},{id:"4",role:"assistant",message:{type:"forwarding",data:{content:"IT Support"}}},{id:"5",role:"assistant",message:{type:"text",data:{content:"I have created a support ticket for you."}}},{id:"6",role:"assistant",message:{type:"tool-invocation",data:{id:101,tool:"task",system:"payload",fetchLatest:!1,taskData:ChatCardTask_stories.chatCardTestData}}},{id:"7",role:"user",message:{type:"text",data:{content:"Thank you! Can I also get help with my printer?"}}},{id:"8",role:"assistant",message:{type:"text",data:{content:"Of course! What issue are you facing with the printer?"}}},{id:"9",role:"user",message:{type:"text",data:{content:"It is not connecting to the network."}}},{id:"10",role:"assistant",message:{type:"forwarding",data:{content:"Printer Support"}}},{id:"11",role:"assistant",message:{type:"text",data:{content:"A new ticket has been created for your printer issue."}}},{id:"12",role:"assistant",message:{type:"tool-invocation",data:{id:102,tool:"task",system:"payload",fetchLatest:!1,taskData:ChatCardTask_stories.chatCardTestData}}},{id:"13",role:"user",message:{type:"text",data:{content:"How do I check the status of my tickets?"}}},{id:"14",role:"assistant",message:{type:"text",data:{content:"You can view all your open tickets in the Helpdesk portal."}}},{id:"15",role:"assistant",message:{type:"tool-invocation",data:{id:103,tool:"task",system:"payload",fetchLatest:!1,taskData:ChatCardTask_stories.chatCardTestData}}}],currentUser:{id:1,name:"John Doe",email:"john.doe@example.com",avatar:"/path-to-avatar.jpg",role:"user"}}},StreamingChunks={render:args=>{const[messages,setMessages]=(0,react.useState)([]);return(0,react.useEffect)((()=>{const convo=[{id:"1",role:"user",message:{type:"text",data:{content:"Hello, I need help with my laptop."}}},{id:"2",role:"assistant",message:{type:"text",data:{content:""}},currentUser:{name:"Helpdesk Bot"}},{id:"3",role:"user",message:{type:"text",data:{content:"It keeps restarting randomly."}}},{id:"4",role:"assistant",message:{type:"forwarding",data:{content:"IT Support"}}},{id:"5",role:"assistant",message:{type:"text",data:{content:""}}},{id:"6",role:"assistant",message:{type:"tool-invocation",data:{id:101,tool:"task",system:"payload",fetchLatest:!1,taskData:ChatCardTask_stories.chatCardTestData}}},{id:"7",role:"user",message:{type:"text",data:{content:"Thank you! Can I also get help with my printer?"}}},{id:"8",role:"assistant",message:{type:"text",data:{content:""}}},{id:"9",role:"user",message:{type:"text",data:{content:"It is not connecting to the network."}}},{id:"10",role:"assistant",message:{type:"forwarding",data:{content:"Printer Support"}}},{id:"11",role:"assistant",message:{type:"text",data:{content:""}}},{id:"12",role:"assistant",message:{type:"tool-invocation",data:{id:102,tool:"task",system:"payload",fetchLatest:!1,taskData:ChatCardTask_stories.chatCardTestData}}},{id:"13",role:"user",message:{type:"text",data:{content:"How do I check the status of my tickets?"}}},{id:"14",role:"assistant",message:{type:"text",data:{content:""}}},{id:"15",role:"assistant",message:{type:"tool-invocation",data:{id:103,tool:"task",system:"payload",fetchLatest:!1,taskData:ChatCardTask_stories.chatCardTestData}}}],assistantChunks=["Hi! I can help you with that. Can you describe the issue?","I have created a support ticket for you.","Of course! What issue are you facing with the printer?","A new ticket has been created for your printer issue.","You can view all your open tickets in the Helpdesk portal."].map((text=>text.split(/(\s+)/).filter(Boolean)));let idx=0,chunkIdx=0,msgIdx=0,timer=null;function streamNext(currentMessages){if(!(idx>=convo.length)){if([1,4,7,10,13].includes(idx))return currentMessages.length<idx+1?void setMessages((prev=>{const next=[...prev,convo[idx]];return timer=setTimeout((()=>streamNext(next)),1e3),next})):chunkIdx<assistantChunks[msgIdx].length?(setMessages((prev=>{var _last_message_data;const updated=[...prev],last={...updated[idx]};return last.message={...last.message,data:{...last.message.data,content:((null===(_last_message_data=last.message.data)||void 0===_last_message_data?void 0:_last_message_data.content)||"")+assistantChunks[msgIdx][chunkIdx]}},updated[idx]=last,timer=setTimeout((()=>streamNext(updated)),200),updated})),void chunkIdx++):(chunkIdx=0,msgIdx++,idx++,void(timer=setTimeout((()=>streamNext(messages)),1e3)));setMessages((prev=>{const next=[...prev,convo[idx]];return timer=setTimeout((()=>streamNext(next)),1e3),next})),idx++}}return setMessages([convo[0]]),timer=setTimeout((()=>streamNext([convo[0]])),1e3),()=>{timer&&clearTimeout(timer)}}),[]),(0,jsx_runtime.jsx)(ChatInterfaceMessages,{...args,messages})},args:{contextType:"project",currentUser:{id:1,name:"John Doe",email:"john.doe@example.com",avatar:"/path-to-avatar.jpg",role:"user"}}},__namedExportsOrder=["TextOnly","StreamingChunks"];TextOnly.parameters={...TextOnly.parameters,docs:{...TextOnly.parameters?.docs,source:{originalSource:"{\n  args: {\n    messages: [{\n      id: '1',\n      role: 'user',\n      message: {\n        type: 'text',\n        data: {\n          content: 'Hello, I need help with my laptop.'\n        }\n      }\n    }, {\n      id: '2',\n      role: 'assistant',\n      message: {\n        type: 'text',\n        data: {\n          content: 'Hi! I can help you with that. Can you describe the issue?'\n        }\n      },\n      currentUser: {\n        name: 'Helpdesk Bot'\n      }\n    }, {\n      id: '3',\n      role: 'user',\n      message: {\n        type: 'text',\n        data: {\n          content: 'It keeps restarting randomly.'\n        }\n      }\n    }, {\n      id: '4',\n      role: 'assistant',\n      message: {\n        type: 'forwarding',\n        data: {\n          content: 'IT Support'\n        }\n      }\n    }, {\n      id: '5',\n      role: 'assistant',\n      message: {\n        type: 'text',\n        data: {\n          content: 'I have created a support ticket for you.'\n        }\n      }\n    }, {\n      id: '6',\n      role: 'assistant',\n      message: {\n        type: 'tool-invocation',\n        data: {\n          id: 101,\n          tool: 'task',\n          system: 'payload',\n          fetchLatest: false,\n          taskData: chatCardTestData\n        }\n      }\n    }, {\n      id: '7',\n      role: 'user',\n      message: {\n        type: 'text',\n        data: {\n          content: 'Thank you! Can I also get help with my printer?'\n        }\n      }\n    }, {\n      id: '8',\n      role: 'assistant',\n      message: {\n        type: 'text',\n        data: {\n          content: 'Of course! What issue are you facing with the printer?'\n        }\n      }\n    }, {\n      id: '9',\n      role: 'user',\n      message: {\n        type: 'text',\n        data: {\n          content: 'It is not connecting to the network.'\n        }\n      }\n    }, {\n      id: '10',\n      role: 'assistant',\n      message: {\n        type: 'forwarding',\n        data: {\n          content: 'Printer Support'\n        }\n      }\n    }, {\n      id: '11',\n      role: 'assistant',\n      message: {\n        type: 'text',\n        data: {\n          content: 'A new ticket has been created for your printer issue.'\n        }\n      }\n    }, {\n      id: '12',\n      role: 'assistant',\n      message: {\n        type: 'tool-invocation',\n        data: {\n          id: 102,\n          tool: 'task',\n          system: 'payload',\n          fetchLatest: false,\n          taskData: chatCardTestData\n        }\n      }\n    }, {\n      id: '13',\n      role: 'user',\n      message: {\n        type: 'text',\n        data: {\n          content: 'How do I check the status of my tickets?'\n        }\n      }\n    }, {\n      id: '14',\n      role: 'assistant',\n      message: {\n        type: 'text',\n        data: {\n          content: 'You can view all your open tickets in the Helpdesk portal.'\n        }\n      }\n    }, {\n      id: '15',\n      role: 'assistant',\n      message: {\n        type: 'tool-invocation',\n        data: {\n          id: 103,\n          tool: 'task',\n          system: 'payload',\n          fetchLatest: false,\n          taskData: chatCardTestData\n        }\n      }\n    }] as ChatMessageProps[],\n    currentUser: {\n      id: 1,\n      name: 'John Doe',\n      email: 'john.doe@example.com',\n      avatar: '/path-to-avatar.jpg',\n      role: 'user'\n    }\n  }\n}",...TextOnly.parameters?.docs?.source}}},StreamingChunks.parameters={...StreamingChunks.parameters,docs:{...StreamingChunks.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const [messages, setMessages] = useState<ChatMessageProps[]>([]);\n    useEffect(() => {\n      const convo: ChatMessageProps[] = [{\n        id: '1',\n        role: 'user',\n        message: {\n          type: 'text',\n          data: {\n            content: 'Hello, I need help with my laptop.'\n          }\n        }\n      }, {\n        id: '2',\n        role: 'assistant',\n        message: {\n          type: 'text',\n          data: {\n            content: ''\n          }\n        },\n        currentUser: {\n          name: 'Helpdesk Bot'\n        }\n      }, {\n        id: '3',\n        role: 'user',\n        message: {\n          type: 'text',\n          data: {\n            content: 'It keeps restarting randomly.'\n          }\n        }\n      }, {\n        id: '4',\n        role: 'assistant',\n        message: {\n          type: 'forwarding',\n          data: {\n            content: 'IT Support'\n          }\n        }\n      }, {\n        id: '5',\n        role: 'assistant',\n        message: {\n          type: 'text',\n          data: {\n            content: ''\n          }\n        }\n      }, {\n        id: '6',\n        role: 'assistant',\n        message: {\n          type: 'tool-invocation',\n          data: {\n            id: 101,\n            tool: 'task',\n            system: 'payload',\n            fetchLatest: false,\n            taskData: chatCardTestData\n          }\n        }\n      }, {\n        id: '7',\n        role: 'user',\n        message: {\n          type: 'text',\n          data: {\n            content: 'Thank you! Can I also get help with my printer?'\n          }\n        }\n      }, {\n        id: '8',\n        role: 'assistant',\n        message: {\n          type: 'text',\n          data: {\n            content: ''\n          }\n        }\n      }, {\n        id: '9',\n        role: 'user',\n        message: {\n          type: 'text',\n          data: {\n            content: 'It is not connecting to the network.'\n          }\n        }\n      }, {\n        id: '10',\n        role: 'assistant',\n        message: {\n          type: 'forwarding',\n          data: {\n            content: 'Printer Support'\n          }\n        }\n      }, {\n        id: '11',\n        role: 'assistant',\n        message: {\n          type: 'text',\n          data: {\n            content: ''\n          }\n        }\n      }, {\n        id: '12',\n        role: 'assistant',\n        message: {\n          type: 'tool-invocation',\n          data: {\n            id: 102,\n            tool: 'task',\n            system: 'payload',\n            fetchLatest: false,\n            taskData: chatCardTestData\n          }\n        }\n      }, {\n        id: '13',\n        role: 'user',\n        message: {\n          type: 'text',\n          data: {\n            content: 'How do I check the status of my tickets?'\n          }\n        }\n      }, {\n        id: '14',\n        role: 'assistant',\n        message: {\n          type: 'text',\n          data: {\n            content: ''\n          }\n        }\n      }, {\n        id: '15',\n        role: 'assistant',\n        message: {\n          type: 'tool-invocation',\n          data: {\n            id: 103,\n            tool: 'task',\n            system: 'payload',\n            fetchLatest: false,\n            taskData: chatCardTestData\n          }\n        }\n      }];\n      // Split assistant text messages into word chunks\n      const assistantTexts = ['Hi! I can help you with that. Can you describe the issue?',\n      // id:2\n      'I have created a support ticket for you.',\n      // id:5\n      'Of course! What issue are you facing with the printer?',\n      // id:8\n      'A new ticket has been created for your printer issue.',\n      // id:11\n      'You can view all your open tickets in the Helpdesk portal.' // id:14\n      ];\n      const assistantChunks = assistantTexts.map(text => text.split(/(\\s+)/).filter(Boolean));\n      let idx = 0;\n      let chunkIdx = 0;\n      let msgIdx = 0;\n      let timer: NodeJS.Timeout | null = null;\n      setMessages([convo[0]]);\n      function streamNext(currentMessages: ChatMessageProps[]) {\n        if (idx >= convo.length) return;\n        // If this is a streaming assistant text message\n        if ([1, 4, 7, 10, 13].includes(idx)) {\n          // Add the message with empty content if not already present\n          if (currentMessages.length < idx + 1) {\n            setMessages(prev => {\n              const next = [...prev, convo[idx]];\n              timer = setTimeout(() => streamNext(next), 1000);\n              return next;\n            });\n            return;\n          }\n          // Stream word chunks for this message\n          if (chunkIdx < assistantChunks[msgIdx].length) {\n            setMessages(prev => {\n              const updated = [...prev];\n              const last = {\n                ...updated[idx]\n              };\n              last.message = {\n                ...last.message,\n                data: {\n                  ...last.message.data,\n                  content: (last.message.data?.content || '') + assistantChunks[msgIdx][chunkIdx]\n                }\n              };\n              updated[idx] = last;\n              timer = setTimeout(() => streamNext(updated), 200);\n              return updated;\n            });\n            chunkIdx++;\n            return;\n          } else {\n            chunkIdx = 0;\n            msgIdx++;\n            idx++;\n            timer = setTimeout(() => streamNext(messages), 1000);\n            return;\n          }\n        }\n        // Add the next message\n        setMessages(prev => {\n          const next = [...prev, convo[idx]];\n          timer = setTimeout(() => streamNext(next), 1000);\n          return next;\n        });\n        idx++;\n      }\n      timer = setTimeout(() => streamNext([convo[0]]), 1000);\n      return () => {\n        if (timer) clearTimeout(timer);\n      };\n    }, []);\n    return <ChatInterfaceMessages {...args} messages={messages} />;\n  },\n  args: {\n    contextType: 'project',\n    currentUser: {\n      id: 1,\n      name: 'John Doe',\n      email: 'john.doe@example.com',\n      avatar: '/path-to-avatar.jpg',\n      role: 'user'\n    }\n  }\n}",...StreamingChunks.parameters?.docs?.source}}}},"./src/components/ui/scroll-area.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>ScrollArea});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/next@15.1.3_@babel+core@7.26.0_@opentelemetry+api@1.9.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.83.0/node_modules/next/dist/compiled/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/next@15.1.3_@babel+core@7.26.0_@opentelemetry+api@1.9.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.83.0/node_modules/next/dist/compiled/react/index.js"),_radix_ui_react_scroll_area__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/.pnpm/@radix-ui+react-scroll-area@1.2.2_@types+react-dom@19.0.2_@types+react@19.0.2__@types+r_7735703eee4005b1924a7411b3879adf/node_modules/@radix-ui/react-scroll-area/dist/index.mjs"),_lib_utils__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/utils/cn.ts");const ScrollArea=react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((({className,children,...props},ref)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_radix_ui_react_scroll_area__WEBPACK_IMPORTED_MODULE_2__.bL,{ref,className:(0,_lib_utils__WEBPACK_IMPORTED_MODULE_3__.cn)("relative overflow-hidden",className),...props,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_scroll_area__WEBPACK_IMPORTED_MODULE_2__.LM,{className:"h-full w-full rounded-[inherit]",children}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ScrollBar,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_scroll_area__WEBPACK_IMPORTED_MODULE_2__.OK,{})]})));ScrollArea.displayName=_radix_ui_react_scroll_area__WEBPACK_IMPORTED_MODULE_2__.bL.displayName;const ScrollBar=react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((({className,orientation="vertical",...props},ref)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_scroll_area__WEBPACK_IMPORTED_MODULE_2__.VM,{ref,orientation,className:(0,_lib_utils__WEBPACK_IMPORTED_MODULE_3__.cn)("flex touch-none select-none transition-colors","vertical"===orientation&&"h-full w-2.5 border-l border-l-transparent p-[1px]","horizontal"===orientation&&"h-2.5 flex-col border-t border-t-transparent p-[1px]",className),...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_radix_ui_react_scroll_area__WEBPACK_IMPORTED_MODULE_2__.lr,{className:"relative flex-1 rounded-full bg-border"})})));ScrollBar.displayName=_radix_ui_react_scroll_area__WEBPACK_IMPORTED_MODULE_2__.VM.displayName,ScrollArea.__docgenInfo={description:"",methods:[]},ScrollBar.__docgenInfo={description:"",methods:[],props:{orientation:{defaultValue:{value:"'vertical'",computed:!1},required:!1}}}}}]);