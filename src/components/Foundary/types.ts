/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "KnowledgeMetadata".
 */
export type KnowledgeMetadata =
  | {
      key: string
      value: string
      id?: string | null
    }[]
  | null
/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji'

export interface Config {
  auth: {
    users: UserAuthOperations
  }
  blocks: {}
  collections: {
    users: User
    capabilities: Capability
    'digital-colleagues': DigitalColleague
    teams: Team
    epics: Epic
    tasks: Task
    projects: Project
    files: File
    knowledgeBases: KnowledgeBase
    artefacts: Artefact
    roles: Role
    mcpTools: McpTool
    sprints: Sprint
    reminders: Reminder
    documents: Document
    knowledge: Knowledge
    'payload-locked-documents': PayloadLockedDocument
    'payload-preferences': PayloadPreference
    'payload-migrations': PayloadMigration
  }
  collectionsJoins: {}
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>
    capabilities: CapabilitiesSelect<false> | CapabilitiesSelect<true>
    'digital-colleagues': DigitalColleaguesSelect<false> | DigitalColleaguesSelect<true>
    teams: TeamsSelect<false> | TeamsSelect<true>
    epics: EpicsSelect<false> | EpicsSelect<true>
    tasks: TasksSelect<false> | TasksSelect<true>
    projects: ProjectsSelect<false> | ProjectsSelect<true>
    files: FilesSelect<false> | FilesSelect<true>
    knowledgeBases: KnowledgeBasesSelect<false> | KnowledgeBasesSelect<true>
    artefacts: ArtefactsSelect<false> | ArtefactsSelect<true>
    roles: RolesSelect<false> | RolesSelect<true>
    mcpTools: McpToolsSelect<false> | McpToolsSelect<true>
    sprints: SprintsSelect<false> | SprintsSelect<true>
    reminders: RemindersSelect<false> | RemindersSelect<true>
    documents: DocumentsSelect<false> | DocumentsSelect<true>
    knowledge: KnowledgeSelect<false> | KnowledgeSelect<true>
    'payload-locked-documents':
      | PayloadLockedDocumentsSelect<false>
      | PayloadLockedDocumentsSelect<true>
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>
  }
  db: {
    defaultIDType: number
  }
  globals: {}
  globalsSelect: {}
  locale: null
  user: User & {
    collection: 'users'
  }
  jobs: {
    tasks: unknown
    workflows: unknown
  }
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string
    password: string
  }
  login: {
    email: string
    password: string
  }
  registerFirstUser: {
    email: string
    password: string
  }
  unlock: {
    email: string
    password: string
  }
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string
  email: string
  emailVerified?: string | null
  name?: string | null
  image?: string | null
  accounts?:
    | {
        provider: string
        providerAccountId: string
        type: string
        id?: string | null
      }[]
    | null
  updatedAt: string
  createdAt: string
  enableAPIKey?: boolean | null
  apiKey?: string | null
  apiKeyIndex?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "capabilities".
 */
export interface Capability {
  id: number
  name: string
  description?: string | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "digital-colleagues".
 */
export interface DigitalColleague {
  id: number
  name: string
  capabilities?:
    | (
        | {
            relationTo: 'mcpTools'
            value: number | McpTool
          }
        | {
            relationTo: 'capabilities'
            value: number | Capability
          }
      )[]
    | null
  knowledge?: (number | null) | Knowledge
  coreKnowledge?: (number | null) | Knowledge
  description?: string | null
  /**
   * A detailed job description for this digital colleague.
   */
  jobDescription?: string | null
  /**
   * Work instructions for this digital colleague.
   */
  workInstructions?: string | null
  /**
   * The capability level of this digital colleague.
   */
  capabilityLevel: number
  systemMsg?: string | null
  metadata?: {
    type?: string
    [k: string]: unknown
  }
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mcpTools".
 */
export interface McpTool {
  id: number
  name: string
  description?: string | null
  url?: string | null
  headers?:
    | {
        [k: string]: unknown
      }
    | unknown[]
    | string
    | number
    | boolean
    | null
  toolNames?:
    | {
        toolName: string
        id?: string | null
      }[]
    | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "knowledge".
 */
export interface Knowledge {
  id: number
  name: string
  /**
   * Select the team this knowledge belongs to
   */
  team?: (number | null) | Team
  /**
   * Set visibility for this knowledge. Public knowledge is accessible to all users, while private knowledge is restricted to team members.
   */
  visibility?: ('public' | 'private') | null
  source: 'payload' | 'github'
  metadata?: KnowledgeMetadata
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "teams".
 */
export interface Team {
  id: number
  name: string
  description?: string | null
  systemMsg?: string | null
  members?:
    | (
        | {
            relationTo: 'digital-colleagues'
            value: number | DigitalColleague
          }
        | {
            relationTo: 'users'
            value: string | User
          }
      )[]
    | null
  knowledgeBase?: (number | null) | KnowledgeBase
  useProjects?: boolean | null
  useKnowledge?: boolean | null
  useFiles?: boolean | null
  useChat?: boolean | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "knowledgeBases".
 */
export interface KnowledgeBase {
  id: number
  knowledgeBaseId: string
  name?: string | null
  description?: string | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "epics".
 */
export interface Epic {
  id: number
  name: string
  description?: string | null
  project?: (number | null) | Project
  color: string
  confidence: 'low' | 'medium' | 'high'
  phase: number
  startDate: string
  endDate: string
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: number
  name: string
  description?: string | null
  projectObjectives?: string | null
  workInstructions?: string | null
  team: number | Team
  metadata?: {
    generatePlan?: boolean
    [k: string]: unknown
  }
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tasks".
 */
export interface Task {
  id: number
  name?: string | null
  description?: string | null
  assignee?:
    | ({
        relationTo: 'digital-colleagues'
        value: number | DigitalColleague
      } | null)
    | ({
        relationTo: 'users'
        value: string | User
      } | null)
  status: 'backlog' | 'todo' | 'in-progress' | 'review' | 'done' | 'cancelled'
  project?: (number | null) | Project
  epic?: (number | null) | Epic
  /**
   * Estimate of effort required to complete this task, in story points.
   */
  storyPoints?: number | null
  /**
   * The sprint this task is assigned to, if applicable.
   */
  sprint?: (number | null) | Sprint
  /**
   * The type of task. This helps categorize the task for better organization.
   */
  type?: ('story' | 'bug' | 'task' | 'spike') | null
  /**
   * The priority of this task. This helps in determining the order of work.
   */
  priority?: ('low' | 'medium' | 'high' | 'critical') | null
  parents?: (number | Task)[] | null
  metadata?:
    | {
        [k: string]: unknown
      }
    | unknown[]
    | string
    | number
    | boolean
    | null
  dateLogged: string
  closureDate?: string | null
  index: number
  comments?:
    | {
        text: string
        author:
          | {
              relationTo: 'users'
              value: string | User
            }
          | {
              relationTo: 'digital-colleagues'
              value: number | DigitalColleague
            }
        timestamp: string
        id?: string | null
      }[]
    | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sprints".
 */
export interface Sprint {
  id: number
  name: string
  description?: string | null
  project?: (number | null) | Project
  startDate: string
  endDate: string
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "files".
 */
export interface File {
  id: number
  name: string
  project: number | Project
  updatedAt: string
  createdAt: string
  url?: string | null
  thumbnailURL?: string | null
  filename?: string | null
  mimeType?: string | null
  filesize?: number | null
  width?: number | null
  height?: number | null
  focalX?: number | null
  focalY?: number | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "artefacts".
 */
export interface Artefact {
  id: number
  content?: string | null
  task: number | Task
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "roles".
 */
export interface Role {
  id: number
  user: string | User
  roleDescription: string
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reminders".
 */
export interface Reminder {
  id: number
  title: string
  description?: string | null
  dueDate?: string | null
  dueTime?: string | null
  project: number | Project
  assignedColleague: number | DigitalColleague
  isRecurring?: boolean | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents".
 */
export interface Document {
  id: number
  title: string
  content?: {
    root: {
      type: string
      children: {
        type: string
        version: number
        [k: string]: unknown
      }[]
      direction: ('ltr' | 'rtl') | null
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | ''
      indent: number
      version: number
    }
    [k: string]: unknown
  } | null
  project?: (number | null) | Project
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number
  document?:
    | ({
        relationTo: 'users'
        value: string | User
      } | null)
    | ({
        relationTo: 'capabilities'
        value: number | Capability
      } | null)
    | ({
        relationTo: 'digital-colleagues'
        value: number | DigitalColleague
      } | null)
    | ({
        relationTo: 'teams'
        value: number | Team
      } | null)
    | ({
        relationTo: 'epics'
        value: number | Epic
      } | null)
    | ({
        relationTo: 'tasks'
        value: number | Task
      } | null)
    | ({
        relationTo: 'projects'
        value: number | Project
      } | null)
    | ({
        relationTo: 'files'
        value: number | File
      } | null)
    | ({
        relationTo: 'knowledgeBases'
        value: number | KnowledgeBase
      } | null)
    | ({
        relationTo: 'artefacts'
        value: number | Artefact
      } | null)
    | ({
        relationTo: 'roles'
        value: number | Role
      } | null)
    | ({
        relationTo: 'mcpTools'
        value: number | McpTool
      } | null)
    | ({
        relationTo: 'sprints'
        value: number | Sprint
      } | null)
    | ({
        relationTo: 'reminders'
        value: number | Reminder
      } | null)
    | ({
        relationTo: 'documents'
        value: number | Document
      } | null)
    | ({
        relationTo: 'knowledge'
        value: number | Knowledge
      } | null)
  globalSlug?: string | null
  user: {
    relationTo: 'users'
    value: string | User
  }
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number
  user: {
    relationTo: 'users'
    value: string | User
  }
  key?: string | null
  value?:
    | {
        [k: string]: unknown
      }
    | unknown[]
    | string
    | number
    | boolean
    | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number
  name?: string | null
  batch?: number | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  id?: T
  email?: T
  emailVerified?: T
  name?: T
  image?: T
  accounts?:
    | T
    | {
        provider?: T
        providerAccountId?: T
        type?: T
        id?: T
      }
  updatedAt?: T
  createdAt?: T
  enableAPIKey?: T
  apiKey?: T
  apiKeyIndex?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "capabilities_select".
 */
export interface CapabilitiesSelect<T extends boolean = true> {
  name?: T
  description?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "digital-colleagues_select".
 */
export interface DigitalColleaguesSelect<T extends boolean = true> {
  name?: T
  capabilities?: T
  knowledge?: T
  coreKnowledge?: T
  description?: T
  jobDescription?: T
  workInstructions?: T
  capabilityLevel?: T
  systemMsg?: T
  metadata?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "teams_select".
 */
export interface TeamsSelect<T extends boolean = true> {
  name?: T
  description?: T
  systemMsg?: T
  members?: T
  knowledgeBase?: T
  useProjects?: T
  useKnowledge?: T
  useFiles?: T
  useChat?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "epics_select".
 */
export interface EpicsSelect<T extends boolean = true> {
  name?: T
  description?: T
  project?: T
  color?: T
  confidence?: T
  phase?: T
  startDate?: T
  endDate?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tasks_select".
 */
export interface TasksSelect<T extends boolean = true> {
  name?: T
  description?: T
  assignee?: T
  status?: T
  project?: T
  epic?: T
  storyPoints?: T
  sprint?: T
  type?: T
  priority?: T
  parents?: T
  metadata?: T
  dateLogged?: T
  closureDate?: T
  index?: T
  comments?:
    | T
    | {
        text?: T
        author?: T
        timestamp?: T
        id?: T
      }
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  name?: T
  description?: T
  projectObjectives?: T
  workInstructions?: T
  team?: T
  metadata?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "files_select".
 */
export interface FilesSelect<T extends boolean = true> {
  name?: T
  project?: T
  updatedAt?: T
  createdAt?: T
  url?: T
  thumbnailURL?: T
  filename?: T
  mimeType?: T
  filesize?: T
  width?: T
  height?: T
  focalX?: T
  focalY?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "knowledgeBases_select".
 */
export interface KnowledgeBasesSelect<T extends boolean = true> {
  knowledgeBaseId?: T
  name?: T
  description?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "artefacts_select".
 */
export interface ArtefactsSelect<T extends boolean = true> {
  content?: T
  task?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "roles_select".
 */
export interface RolesSelect<T extends boolean = true> {
  user?: T
  roleDescription?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mcpTools_select".
 */
export interface McpToolsSelect<T extends boolean = true> {
  name?: T
  description?: T
  url?: T
  headers?: T
  toolNames?:
    | T
    | {
        toolName?: T
        id?: T
      }
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sprints_select".
 */
export interface SprintsSelect<T extends boolean = true> {
  name?: T
  description?: T
  project?: T
  startDate?: T
  endDate?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reminders_select".
 */
export interface RemindersSelect<T extends boolean = true> {
  title?: T
  description?: T
  dueDate?: T
  dueTime?: T
  project?: T
  assignedColleague?: T
  isRecurring?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents_select".
 */
export interface DocumentsSelect<T extends boolean = true> {
  title?: T
  content?: T
  project?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "knowledge_select".
 */
export interface KnowledgeSelect<T extends boolean = true> {
  name?: T
  team?: T
  visibility?: T
  source?: T
  metadata?: T | KnowledgeMetadataSelect<T>
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "KnowledgeMetadata_select".
 */
export interface KnowledgeMetadataSelect<T extends boolean = true> {
  key?: T
  value?: T
  id?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T
  globalSlug?: T
  user?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T
  key?: T
  value?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T
  batch?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown
}

////////////////////////////////////////
/// old
export interface BusinessUnit {
  id: string
  name: string
  description: string
  icon: React.ReactNode
  color: string
  accentColor: string
}

export interface SidebarItem {
  id: string
  title: string
  icon: React.ReactNode
  isActive?: boolean
  badge?: string
  url?: string
  maxItems?: number
  items?: {
    id: string
    title: string
    url: string
    badge?: string
  }[]
}

export interface FileType {
  id: string
  name: string
  app?: string
  modified?: string
  icon?: React.ReactNode
  shared?: boolean
  size?: string
  collaborators?: number
  filename: string
  filesize: number
  createdAt: Date | string
  url: string
  mimeType: string
  thumbnailURL?: string | null
}

export interface ProjectSummary {
  id: number
  name: string
  description: string
  progress: number
  dueDate: string
  members: number
  files: number
}

export interface App {
  name: string
  icon: React.ReactNode
  description: string
  category: string
  recent: boolean
  new: boolean
  progress: number
}

export type HumanColleague = User & { type: 'human' }
export type TypedDigitalColleague = DigitalColleague & { type: 'digital' }
export type Colleague = HumanColleague | TypedDigitalColleague

export interface KnowledgeDocument {
  id: string
  title: string
  description?: string
  metadata?: Record<string, any>
  content?: string
  format: 'markdown' | 'mdx' | 'richtext' | 'text'
  tags?: string[]
  createdAt: Date
  updatedAt?: Date
}

export interface KnowledgeMenuConfig {
  groupBy: string[] // Array of metadata keys to group by, in order of hierarchy
  sortBy?: 'title' | 'createdAt' | 'updatedAt'
  sortOrder?: 'asc' | 'desc'
  showDocumentCount?: boolean
}

export interface KnowledgeContext {
  id: string
  label: string
  description?: string
  menuConfig: KnowledgeMenuConfig
  icon?: React.ReactNode
}

export interface KnowledgeHierarchy {
  [key: string]: {
    documents: KnowledgeDocument[]
    children?: KnowledgeHierarchy
  }
}

export interface TeamSummary {
  id: string
  name: string
  description: string
  humanColleagues: number
  digitalColleagues: number
  projects: number
}

export interface RecentFile {
  name: string
  app: string
  modified: string
  icon: React.ReactNode
  shared: boolean
  size: string
  collaborators: number
}

export interface Notification {
  id: string
  title: string
  description: string
  time: string
  read: boolean
  type: 'info' | 'success' | 'warning' | 'error'
  actionLabel?: string
  onAction?: () => void
}

export interface ProjectFormData {
  name: string
  objectives: string
  workInstructions: string
  plan: boolean
}

export interface ProjectCreationData extends ProjectFormData {
  description?: string
}
